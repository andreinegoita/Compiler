//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/nasta/Downloads/Compiler/Compiler/MiniLang.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="MiniLangParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public interface IMiniLangListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniLangParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgram([NotNull] MiniLangParser.ProgramContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniLangParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgram([NotNull] MiniLangParser.ProgramContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniLangParser.globalVariableDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGlobalVariableDeclaration([NotNull] MiniLangParser.GlobalVariableDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniLangParser.globalVariableDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGlobalVariableDeclaration([NotNull] MiniLangParser.GlobalVariableDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniLangParser.variableDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableDeclaration([NotNull] MiniLangParser.VariableDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniLangParser.variableDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableDeclaration([NotNull] MiniLangParser.VariableDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniLangParser.functionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionDeclaration([NotNull] MiniLangParser.FunctionDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniLangParser.functionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionDeclaration([NotNull] MiniLangParser.FunctionDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniLangParser.parameterList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParameterList([NotNull] MiniLangParser.ParameterListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniLangParser.parameterList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParameterList([NotNull] MiniLangParser.ParameterListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniLangParser.parameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParameter([NotNull] MiniLangParser.ParameterContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniLangParser.parameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParameter([NotNull] MiniLangParser.ParameterContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniLangParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlock([NotNull] MiniLangParser.BlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniLangParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlock([NotNull] MiniLangParser.BlockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniLangParser.localVariableDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLocalVariableDeclaration([NotNull] MiniLangParser.LocalVariableDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniLangParser.localVariableDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLocalVariableDeclaration([NotNull] MiniLangParser.LocalVariableDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniLangParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement([NotNull] MiniLangParser.StatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniLangParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement([NotNull] MiniLangParser.StatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniLangParser.controlStructure"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterControlStructure([NotNull] MiniLangParser.ControlStructureContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniLangParser.controlStructure"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitControlStructure([NotNull] MiniLangParser.ControlStructureContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniLangParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStatement([NotNull] MiniLangParser.IfStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniLangParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStatement([NotNull] MiniLangParser.IfStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniLangParser.whileStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhileStatement([NotNull] MiniLangParser.WhileStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniLangParser.whileStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhileStatement([NotNull] MiniLangParser.WhileStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniLangParser.forStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForStatement([NotNull] MiniLangParser.ForStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniLangParser.forStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForStatement([NotNull] MiniLangParser.ForStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression([NotNull] MiniLangParser.ExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression([NotNull] MiniLangParser.ExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniLangParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionCall([NotNull] MiniLangParser.FunctionCallContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniLangParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionCall([NotNull] MiniLangParser.FunctionCallContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniLangParser.argumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgumentList([NotNull] MiniLangParser.ArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniLangParser.argumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgumentList([NotNull] MiniLangParser.ArgumentListContext context);
}
